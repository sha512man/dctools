DCTOOLS_DIR=$HOME/.local/share/dctools
DCTOOLS_BIN=$DCTOOLS_DIR/bin

PROMPT="%{$fg[cyan]%}%n@%{$fg[green]%}%m%{$reset_color%} ${PROMPT}"
EDITOR="/usr/bin/vim"

export PATH=$PATH:$DCTOOLS_DIR/bin

SECRETS_PATH="${DCTOOLS_DIR}/.secrets"

if [ "${SECRETS_PATH}" ]; then
  source $SECRETS_PATH
fi

# Docker
alias dc="docker compose"
alias docker-compose="docker compose"
alias dps="docker ps -a --format \"table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Status}}\t{{.Ports}}\""

# Firefox
function ffupdate {
  sudo touch /tmp/sudo_touch
  echo "Sudo ✅"

  if [ -z "${1}" ]; then
    echo "Downloading latest firefox version"
    file_name="firefox.tar.bz2"
    wget -O "${file_name}" https://download.mozilla.org/\?product\=firefox-devedition-latest-ssl\&os\=linux64\&lang\=en-US
  else
    file_name="${1}"
  fi

  if [ ! -f "${file_name}" ]; then
    echo "${file_name} must be a valid file"
    exit 1
  fi

  tar -xjf "${file_name}" && sudo rsync -av firefox/* /opt/firefox && sudo chown -R root:root /opt/firefox && rm -rf firefox "${file_name}"
}

function dive {
  docker run --rm -it \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e DOCKER_API_VERSION=1.37 \
    wagoodman/dive:latest $@
}

# General
alias c="clear"
alias e="exit"
alias dctools="dc-tools"
alias howto="code ~/dev/howto && exit"
alias sysupdate="sudo apt update -y && sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt autoclean -y && sudo apt autoremove -y"
alias lock="gnome-screensaver-command -l"
alias vpn="sudo openvpn client.ovpn"

function tmp {
  if [ -z "${1}" ]; then
    cd "${HOME}/.tmp"
  else
    dir_path="${HOME}/.tmp/${1}"
    mkdir -p ${dir_path} && cd ${dir_path}
  fi
}

function pomo {
  break_start=${1}
  break_length=${2}
  break_end=$((break_start + break_length))

  echo "Break starts in ${break_start} and ends in ${break_end}"

  nohup $DCTOOLS_BIN/timer ${break_start} "Začátek pauzy ⏸" > /dev/null 2>&1 &
  disown

  nohup $DCTOOLS_BIN/timer ${break_end} "Konec pauzy ▶" > /dev/null 2>&1 &
  disown

  exit
}

function tea {
  nohup $DCTOOLS_BIN/timer ${1} "Čaj 🫖" > /dev/null 2>&1 &
  disown
  exit
}

function tunnel {
    port="8000"

    case "$1" in
        "foo")
            port="8000"
        ;;

        "bar")
            port="8001"
        ;;

        "baz")
            port="8002"
        ;;
    esac

    echo "Tunneling using port ${port}"

    ssh -R "${port}:localhost:${port}" wedoslb
}

function myip {
  curl 'https://api.myip.com'
}

export PATH=$PATH:$HOME/.local/bin

# Git
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gd="git diff"
alias gf="git fetch"
alias gch="git checkout"
alias gm="git merge"
alias gl="git log --graph --all --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"
alias grelease="git push --follow-tags"
alias gpull="git pull"
alias gpush="git push"
alias grestore="git restore"

function gprune {
  if [ "$1" = "--tags" ]; then
    git tag -l | xargs git tag -d
    git fetch --tags
  else
    git branch --merged >/tmp/merged-branches && $EDITOR /tmp/merged-branches && xargs git branch -d </tmp/merged-branches
  fi
}

function aicommit {
  filePath="/tmp/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)"
  git diff --staged | gpt commit | sed 's/^"\|"$//g' > "${filePath}"

  $EDITOR "${filePath}"
  message=$(cat $filePath)

  echo "Message: ${message}"
  echo "Commit? [y/N] "

  read answer

  case ${answer:0:1} in
    y|Y )
      git commit -m "${message}"
      ;;
    *)
      echo "Aborting..."
      ;;
    esac
}

function airelease {
  if [ -z "${1}" ]; then
    echo "Missing tag name."
    return 1
  fi

  tagName="${1}"
  filePath="/tmp/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)"
  latestTag=$(git describe --tags --abbrev=0)

  echo "Release ${tagName}\n" > "${filePath}"
  git log --pretty=format:"%h - %s" ${latestTag}..HEAD | gpt release >> "${filePath}"

  $EDITOR "${filePath}"
  message=$(cat $filePath)

  echo "Message: ${message}"
  echo "Commit? [y/N] "

  read answer

  case ${answer:0:1} in
    y|Y )
      git tag -a "${1}" -F "${filePath}"
      ;;
    *)
      echo "Aborting..."
      ;;
    esac
}

# GoLang
export PATH=$PATH:/usr/local/go/bin

# ChatGPT
gpt() {
  if [ -z "${OPENAI_API_KEY}" ]; then
    echo "Missing OPENAI_API_KEY env variable"
    exit 1
  fi

  case "${1}" in
      "chat")
          sgpt --chat $$ "${2}"
          ;;
      "code")
          sgpt --code "${2}"
          ;;
      "shell")
          sgpt --shell "${2}"
          ;;
      "repl")
          [ -z "${2}" ] && argument=$$ || argument="${2}"
          sgpt --repl "${argument}"
          ;;
      "usage")
          curl -H "Authorization: Bearer ${OPENAI_API_KEY}" https://api.openai.com/v1/usage
          ;;
      "commit")
          sgpt "Generate a single sentence commit message for my changes, so it fits into 'If applied, this commit will'"
          ;;
      "release")
          sgpt "Generate release notes for following commits history: "
          ;;
      *)
          sgpt "${1}"
          ;;
  esac
}


# Kubernetes
alias k="kubectl"
alias k9s="k9s --kubeconfig=~/.kube/config"

# Python
alias p="python3"
alias python="python3"
